directive @length(min: Int!, max: Int, message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @validateEmail(message: String = "invalid email format") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type User {
  id: ID!
  name: String!
  email: String!
  roles: [Role]
  functions: [Function]
  baseInfo: BaseInfo
}

type Users {
  users: [User!]!
  total: Int!
}

input PaginationInput {
  page: Int = 1
  size: Int = 10
  total: Boolean = false
}

input CreateUserInput {
  name: String! @length(min: 2, max: 50, message: "Name must be between 1 and 50 characters")
  email: String! @validateEmail
  roleIds: [String]
  functionIds: [String]
}

input InviteUserInput {
  email: String!
  fullPermission: Boolean = false
}

type Query {
  users(filter: UserFilter, pagination: PaginationInput): Users!
  user(id: ID!): User
}

type UserMutationPayload {
  success: Boolean!
  message: String
  user: User
}

type Mutation {
  createUser(input: CreateUserInput!): UserMutationPayload!
  updateUser(id: ID!, input: CreateUserInput!): UserMutationPayload!
  inviteUser(input: InviteUserInput!): Boolean!
  deleteUser(id: ID!): UserMutationPayload!
}

# sort
enum SortDirection {
  ASC
  DESC
}

# filter inputs
input UserFilter {
  name: String
  email: String
  roleIds: ID
}

enum UserSortField {
  NAME
  EMAIL
  CREATED_AT
}
