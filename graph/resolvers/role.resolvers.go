package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.65

import (
	"context"
	"crypto/rand"
	"fmt"
	"graphql-demo/graph/helper"
	"graphql-demo/graph/model"
	"log"
	"math/big"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRoleInput) (*model.RoleMutationPayload, error) {
	log.Printf("CreateRole: %v\n", input)
	randID, _ := rand.Int(rand.Reader, big.NewInt(100))
	role := &model.Role{
		ID:          fmt.Sprintf("T%d", randID),
		Name:        input.Name,
		Description: &input.Description,
		BaseInfo:    helper.NewBaseInfoWithDefault(),
	}
	r.roles = append(r.roles, role)

	return &model.RoleMutationPayload{
		Success: true,
		Role:    role,
	}, nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id string, input model.CreateRoleInput) (*model.RoleMutationPayload, error) {
	log.Printf("UpdateRole: %v\n", input)
	for _, role := range r.roles {
		if role.ID == id {
			role.Name = input.Name
			role.Description = &input.Description
			return &model.RoleMutationPayload{
				Success: true,
				Role:    role,
			}, nil
		}
	}
	return &model.RoleMutationPayload{
		Success: false,
	}, fmt.Errorf("role with ID %s not found", id)
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (*model.RoleMutationPayload, error) {
	log.Printf("DeleteRole: %s\n", id)
	for i, role := range r.roles {
		if role.ID == id {
			r.roles = append(r.roles[:i], r.roles[i+1:]...)
			return &model.RoleMutationPayload{
				Success: true,
				Role:    role,
			}, nil
		}
	}
	return &model.RoleMutationPayload{
		Success: false,
	}, fmt.Errorf("role with ID %s not found", id)
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, filter *model.UserFilter, pagination *model.PaginationInput) ([]*model.Role, error) {
	return r.roles, nil
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id string) (*model.Role, error) {
	log.Printf("Role: %s\n", id)
	for _, role := range r.roles {
		if role.ID == id {
			return role, nil
		}
	}
	return nil, fmt.Errorf("role with ID %s not found", id)
}

// Functions is the resolver for the functions field.
func (r *queryResolver) Functions(ctx context.Context, filter *model.UserFilter, pagination *model.PaginationInput) ([]*model.Function, error) {
	funcs := []*model.Function{
		{
			ID:          "T11",
			Name:        "View User",
			Description: "View User",
		},
		{
			ID:          "T12",
			Name:        "Update User",
			Description: "Update User",
		},
	}
	r.functions = funcs
	return r.functions, nil
}

// Function is the resolver for the function field.
func (r *queryResolver) Function(ctx context.Context, id string) (*model.Function, error) {
	log.Printf("Function: %s\n", id)
	for _, function := range r.functions {
		if function.ID == id {
			return function, nil
		}
	}
	return nil, fmt.Errorf("function with ID %s not found", id)
}
