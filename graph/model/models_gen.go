// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type BaseInfo struct {
	Status      string    `json:"status"`
	CreatedBy   string    `json:"createdBy"`
	CreatedTime time.Time `json:"createdTime"`
	UpdatedTime time.Time `json:"updatedTime"`
	UpdatedBy   string    `json:"updatedBy"`
}

type CreateRoleInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type CreateServerInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type CreateUserInput struct {
	Name        string    `json:"name"`
	Email       string    `json:"email"`
	RoleIds     []*string `json:"roleIds,omitempty"`
	FunctionIds []*string `json:"functionIds,omitempty"`
}

type Function struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	BaseInfo    *BaseInfo `json:"baseInfo,omitempty"`
}

type InviteUserInput struct {
	Email          string `json:"email"`
	FullPermission *bool  `json:"fullPermission,omitempty"`
}

type Mutation struct {
}

type PaginationInput struct {
	Page  *int32 `json:"page,omitempty"`
	Size  *int32 `json:"size,omitempty"`
	Total *bool  `json:"total,omitempty"`
}

type Query struct {
}

type Role struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description,omitempty"`
	BaseInfo    *BaseInfo `json:"baseInfo,omitempty"`
}

type RoleMutationPayload struct {
	Success bool    `json:"success"`
	Message *string `json:"message,omitempty"`
	Role    *Role   `json:"role,omitempty"`
}

type Server struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description,omitempty"`
	BaseInfo    *BaseInfo `json:"baseInfo,omitempty"`
}

type ServerFilter struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type ServerInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type ServerList struct {
	Servers []*Server `json:"servers"`
	Total   int32     `json:"total"`
}

type ServerMutationPayload struct {
	Success bool    `json:"success"`
	Message *string `json:"message,omitempty"`
	Server  *Server `json:"server,omitempty"`
}

type User struct {
	ID        string      `json:"id"`
	Name      string      `json:"name"`
	Email     string      `json:"email"`
	Roles     []*Role     `json:"roles,omitempty"`
	Functions []*Function `json:"functions,omitempty"`
	BaseInfo  *BaseInfo   `json:"baseInfo,omitempty"`
}

type UserFilter struct {
	Name    *string `json:"name,omitempty"`
	Email   *string `json:"email,omitempty"`
	RoleIds *string `json:"roleIds,omitempty"`
}

type UserMutationPayload struct {
	Success bool    `json:"success"`
	Message *string `json:"message,omitempty"`
	User    *User   `json:"user,omitempty"`
}

type Users struct {
	Users []*User `json:"users"`
	Total int32   `json:"total"`
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserSortField string

const (
	UserSortFieldName      UserSortField = "NAME"
	UserSortFieldEmail     UserSortField = "EMAIL"
	UserSortFieldCreatedAt UserSortField = "CREATED_AT"
)

var AllUserSortField = []UserSortField{
	UserSortFieldName,
	UserSortFieldEmail,
	UserSortFieldCreatedAt,
}

func (e UserSortField) IsValid() bool {
	switch e {
	case UserSortFieldName, UserSortFieldEmail, UserSortFieldCreatedAt:
		return true
	}
	return false
}

func (e UserSortField) String() string {
	return string(e)
}

func (e *UserSortField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSortField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserSortField", str)
	}
	return nil
}

func (e UserSortField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
